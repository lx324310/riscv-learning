package Common

import Chisel._
import Node._

/* Automatically generated by parse-opcodes */
object Instructions {
  def BEQ                = Bits("b?????????????????000?????1100011")
  def BNE                = Bits("b?????????????????001?????1100011")
  def BLT                = Bits("b?????????????????100?????1100011")
  def BGE                = Bits("b?????????????????101?????1100011")
  def BLTU               = Bits("b?????????????????110?????1100011")
  def BGEU               = Bits("b?????????????????111?????1100011")
  def JALR               = Bits("b?????????????????000?????1100111")
  def JAL                = Bits("b?????????????????????????1101111")
  def LUI                = Bits("b?????????????????????????0110111")
  def AUIPC              = Bits("b?????????????????????????0010111")
  def ADDI               = Bits("b?????????????????000?????0010011")
  def SLLI               = Bits("b000000???????????001?????0010011")
  def SLTI               = Bits("b?????????????????010?????0010011")
  def SLTIU              = Bits("b?????????????????011?????0010011")
  def XORI               = Bits("b?????????????????100?????0010011")
  def SRLI               = Bits("b000000???????????101?????0010011")
  def SRAI               = Bits("b010000???????????101?????0010011")
  def ORI                = Bits("b?????????????????110?????0010011")
  def ANDI               = Bits("b?????????????????111?????0010011")
  def ADD                = Bits("b0000000??????????000?????0110011")
  def SUB                = Bits("b0100000??????????000?????0110011")
  def SLL                = Bits("b0000000??????????001?????0110011")
  def SLT                = Bits("b0000000??????????010?????0110011")
  def SLTU               = Bits("b0000000??????????011?????0110011")
  def XOR                = Bits("b0000000??????????100?????0110011")
  def SRL                = Bits("b0000000??????????101?????0110011")
  def SRA                = Bits("b0100000??????????101?????0110011")
  def OR                 = Bits("b0000000??????????110?????0110011")
  def AND                = Bits("b0000000??????????111?????0110011")
  def ADDIW              = Bits("b?????????????????000?????0011011")
  def SLLIW              = Bits("b0000000??????????001?????0011011")
  def SRLIW              = Bits("b0000000??????????101?????0011011")
  def SRAIW              = Bits("b0100000??????????101?????0011011")
  def ADDW               = Bits("b0000000??????????000?????0111011")
  def SUBW               = Bits("b0100000??????????000?????0111011")
  def SLLW               = Bits("b0000000??????????001?????0111011")
  def SRLW               = Bits("b0000000??????????101?????0111011")
  def SRAW               = Bits("b0100000??????????101?????0111011")
  def LB                 = Bits("b?????????????????000?????0000011")
  def LH                 = Bits("b?????????????????001?????0000011")
  def LW                 = Bits("b?????????????????010?????0000011")
  def LD                 = Bits("b?????????????????011?????0000011")
  def LBU                = Bits("b?????????????????100?????0000011")
  def LHU                = Bits("b?????????????????101?????0000011")
  def LWU                = Bits("b?????????????????110?????0000011")
  def SB                 = Bits("b?????????????????000?????0100011")
  def SH                 = Bits("b?????????????????001?????0100011")
  def SW                 = Bits("b?????????????????010?????0100011")
  def SD                 = Bits("b?????????????????011?????0100011")
  def FENCE              = Bits("b?????????????????000?????0001111")
  def FENCE_I            = Bits("b?????????????????001?????0001111")
  def MUL                = Bits("b0000001??????????000?????0110011")
  def MULH               = Bits("b0000001??????????001?????0110011")
  def MULHSU             = Bits("b0000001??????????010?????0110011")
  def MULHU              = Bits("b0000001??????????011?????0110011")
  def DIV                = Bits("b0000001??????????100?????0110011")
  def DIVU               = Bits("b0000001??????????101?????0110011")
  def REM                = Bits("b0000001??????????110?????0110011")
  def REMU               = Bits("b0000001??????????111?????0110011")
  def MULW               = Bits("b0000001??????????000?????0111011")
  def DIVW               = Bits("b0000001??????????100?????0111011")
  def DIVUW              = Bits("b0000001??????????101?????0111011")
  def REMW               = Bits("b0000001??????????110?????0111011")
  def REMUW              = Bits("b0000001??????????111?????0111011")
  def AMOADD_W           = Bits("b00000????????????010?????0101111")
  def AMOXOR_W           = Bits("b00100????????????010?????0101111")
  def AMOOR_W            = Bits("b01000????????????010?????0101111")
  def AMOAND_W           = Bits("b01100????????????010?????0101111")
  def AMOMIN_W           = Bits("b10000????????????010?????0101111")
  def AMOMAX_W           = Bits("b10100????????????010?????0101111")
  def AMOMINU_W          = Bits("b11000????????????010?????0101111")
  def AMOMAXU_W          = Bits("b11100????????????010?????0101111")
  def AMOSWAP_W          = Bits("b00001????????????010?????0101111")
  def LR_W               = Bits("b00010??00000?????010?????0101111")
  def SC_W               = Bits("b00011????????????010?????0101111")
  def AMOADD_D           = Bits("b00000????????????011?????0101111")
  def AMOXOR_D           = Bits("b00100????????????011?????0101111")
  def AMOOR_D            = Bits("b01000????????????011?????0101111")
  def AMOAND_D           = Bits("b01100????????????011?????0101111")
  def AMOMIN_D           = Bits("b10000????????????011?????0101111")
  def AMOMAX_D           = Bits("b10100????????????011?????0101111")
  def AMOMINU_D          = Bits("b11000????????????011?????0101111")
  def AMOMAXU_D          = Bits("b11100????????????011?????0101111")
  def AMOSWAP_D          = Bits("b00001????????????011?????0101111")
  def LR_D               = Bits("b00010??00000?????011?????0101111")
  def SC_D               = Bits("b00011????????????011?????0101111")
  def SCALL              = Bits("b00000000000000000000000001110011")
  def SBREAK             = Bits("b00000000000100000000000001110011")
  def SRET               = Bits("b10000000000000000000000001110011")
  def CSRRW              = Bits("b?????????????????001?????1110011")
  def CSRRS              = Bits("b?????????????????010?????1110011")
  def CSRRC              = Bits("b?????????????????011?????1110011")
  def CSRRWI             = Bits("b?????????????????101?????1110011")
  def CSRRSI             = Bits("b?????????????????110?????1110011")
  def CSRRCI             = Bits("b?????????????????111?????1110011")
  def FADD_S             = Bits("b0000000??????????????????1010011")
  def FSUB_S             = Bits("b0000100??????????????????1010011")
  def FMUL_S             = Bits("b0001000??????????????????1010011")
  def FDIV_S             = Bits("b0001100??????????????????1010011")
  def FSGNJ_S            = Bits("b0010000??????????000?????1010011")
  def FSGNJN_S           = Bits("b0010000??????????001?????1010011")
  def FSGNJX_S           = Bits("b0010000??????????010?????1010011")
  def FMIN_S             = Bits("b0010100??????????000?????1010011")
  def FMAX_S             = Bits("b0010100??????????001?????1010011")
  def FSQRT_S            = Bits("b010110000000?????????????1010011")
  def FADD_D             = Bits("b0000001??????????????????1010011")
  def FSUB_D             = Bits("b0000101??????????????????1010011")
  def FMUL_D             = Bits("b0001001??????????????????1010011")
  def FDIV_D             = Bits("b0001101??????????????????1010011")
  def FSGNJ_D            = Bits("b0010001??????????000?????1010011")
  def FSGNJN_D           = Bits("b0010001??????????001?????1010011")
  def FSGNJX_D           = Bits("b0010001??????????010?????1010011")
  def FMIN_D             = Bits("b0010101??????????000?????1010011")
  def FMAX_D             = Bits("b0010101??????????001?????1010011")
  def FCVT_S_D           = Bits("b010000000001?????????????1010011")
  def FCVT_D_S           = Bits("b010000100000?????????????1010011")
  def FSQRT_D            = Bits("b010110100000?????????????1010011")
  def FLE_S              = Bits("b1010000??????????000?????1010011")
  def FLT_S              = Bits("b1010000??????????001?????1010011")
  def FEQ_S              = Bits("b1010000??????????010?????1010011")
  def FLE_D              = Bits("b1010001??????????000?????1010011")
  def FLT_D              = Bits("b1010001??????????001?????1010011")
  def FEQ_D              = Bits("b1010001??????????010?????1010011")
  def FCVT_W_S           = Bits("b110000000000?????????????1010011")
  def FCVT_WU_S          = Bits("b110000000001?????????????1010011")
  def FCVT_L_S           = Bits("b110000000010?????????????1010011")
  def FCVT_LU_S          = Bits("b110000000011?????????????1010011")
  def FMV_X_S            = Bits("b111000000000?????000?????1010011")
  def FCLASS_S           = Bits("b111000000000?????001?????1010011")
  def FCVT_W_D           = Bits("b110000100000?????????????1010011")
  def FCVT_WU_D          = Bits("b110000100001?????????????1010011")
  def FCVT_L_D           = Bits("b110000100010?????????????1010011")
  def FCVT_LU_D          = Bits("b110000100011?????????????1010011")
  def FMV_X_D            = Bits("b111000100000?????000?????1010011")
  def FCLASS_D           = Bits("b111000100000?????001?????1010011")
  def FCVT_S_W           = Bits("b110100000000?????????????1010011")
  def FCVT_S_WU          = Bits("b110100000001?????????????1010011")
  def FCVT_S_L           = Bits("b110100000010?????????????1010011")
  def FCVT_S_LU          = Bits("b110100000011?????????????1010011")
  def FMV_S_X            = Bits("b111100000000?????000?????1010011")
  def FCVT_D_W           = Bits("b110100100000?????????????1010011")
  def FCVT_D_WU          = Bits("b110100100001?????????????1010011")
  def FCVT_D_L           = Bits("b110100100010?????????????1010011")
  def FCVT_D_LU          = Bits("b110100100011?????????????1010011")
  def FMV_D_X            = Bits("b111100100000?????000?????1010011")
  def FLW                = Bits("b?????????????????010?????0000111")
  def FLD                = Bits("b?????????????????011?????0000111")
  def FSW                = Bits("b?????????????????010?????0100111")
  def FSD                = Bits("b?????????????????011?????0100111")
  def FMADD_S            = Bits("b?????00??????????????????1000011")
  def FMSUB_S            = Bits("b?????00??????????????????1000111")
  def FNMSUB_S           = Bits("b?????00??????????????????1001011")
  def FNMADD_S           = Bits("b?????00??????????????????1001111")
  def FMADD_D            = Bits("b?????01??????????????????1000011")
  def FMSUB_D            = Bits("b?????01??????????????????1000111")
  def FNMSUB_D           = Bits("b?????01??????????????????1001011")
  def FNMADD_D           = Bits("b?????01??????????????????1001111")
  def CUSTOM0            = Bits("b?????????????????000?????0001011")
  def CUSTOM0_RS1        = Bits("b?????????????????010?????0001011")
  def CUSTOM0_RS1_RS2    = Bits("b?????????????????011?????0001011")
  def CUSTOM0_RD         = Bits("b?????????????????100?????0001011")
  def CUSTOM0_RD_RS1     = Bits("b?????????????????110?????0001011")
  def CUSTOM0_RD_RS1_RS2 = Bits("b?????????????????111?????0001011")
  def CUSTOM1            = Bits("b?????????????????000?????0101011")
  def CUSTOM1_RS1        = Bits("b?????????????????010?????0101011")
  def CUSTOM1_RS1_RS2    = Bits("b?????????????????011?????0101011")
  def CUSTOM1_RD         = Bits("b?????????????????100?????0101011")
  def CUSTOM1_RD_RS1     = Bits("b?????????????????110?????0101011")
  def CUSTOM1_RD_RS1_RS2 = Bits("b?????????????????111?????0101011")
  def CUSTOM2            = Bits("b?????????????????000?????1011011")
  def CUSTOM2_RS1        = Bits("b?????????????????010?????1011011")
  def CUSTOM2_RS1_RS2    = Bits("b?????????????????011?????1011011")
  def CUSTOM2_RD         = Bits("b?????????????????100?????1011011")
  def CUSTOM2_RD_RS1     = Bits("b?????????????????110?????1011011")
  def CUSTOM2_RD_RS1_RS2 = Bits("b?????????????????111?????1011011")
  def CUSTOM3            = Bits("b?????????????????000?????1111011")
  def CUSTOM3_RS1        = Bits("b?????????????????010?????1111011")
  def CUSTOM3_RS1_RS2    = Bits("b?????????????????011?????1111011")
  def CUSTOM3_RD         = Bits("b?????????????????100?????1111011")
  def CUSTOM3_RD_RS1     = Bits("b?????????????????110?????1111011")
  def CUSTOM3_RD_RS1_RS2 = Bits("b?????????????????111?????1111011")

  def NOP                = Bits("b00000000000000000000000000010011")
}
object Causes {
  val misaligned_fetch = 0x0
  val fault_fetch = 0x1
  val illegal_instruction = 0x2
  val privileged_instruction = 0x3
  val fp_disabled = 0x4
  val syscall = 0x6
  val breakpoint = 0x7
  val misaligned_load = 0x8
  val misaligned_store = 0x9
  val fault_load = 0xa
  val fault_store = 0xb
  val accelerator_disabled = 0xc
  val all = {
    val res = collection.mutable.ArrayBuffer[Int]()
    res += misaligned_fetch
    res += fault_fetch
    res += illegal_instruction
    res += privileged_instruction
    res += fp_disabled
    res += syscall
    res += breakpoint
    res += misaligned_load
    res += misaligned_store
    res += fault_load
    res += fault_store
    res += accelerator_disabled
    res.toArray
  }
}
object CSRs {
  val fflags = 0x1
  val frm = 0x2
  val fcsr = 0x3
  val sup0 = 0x500
  val sup1 = 0x501
  val epc = 0x502
  val badvaddr = 0x503
  val ptbr = 0x504
  val asid = 0x505
  val count = 0x506
  val compare = 0x507
  val evec = 0x508
  val cause = 0x509
  val status = 0x50a
  val hartid = 0x50b
  val impl = 0x50c
  val fatc = 0x50d
  val send_ipi = 0x50e
  val clear_ipi = 0x50f
  val stats = 0x51c
  val reset = 0x51d
  val tohost = 0x51e
  val fromhost = 0x51f
  val cycle = 0xc00
  val time = 0xc01
  val instret = 0xc02
  val uarch0 = 0xcc0
  val uarch1 = 0xcc1
  val uarch2 = 0xcc2
  val uarch3 = 0xcc3
  val uarch4 = 0xcc4
  val uarch5 = 0xcc5
  val uarch6 = 0xcc6
  val uarch7 = 0xcc7
  val uarch8 = 0xcc8
  val uarch9 = 0xcc9
  val uarch10 = 0xcca
  val uarch11 = 0xccb
  val uarch12 = 0xccc
  val uarch13 = 0xccd
  val uarch14 = 0xcce
  val uarch15 = 0xccf
  val counth = 0x586
  val cycleh = 0xc80
  val timeh = 0xc81
  val instreth = 0xc82
  val all = {
    val res = collection.mutable.ArrayBuffer[Int]()
    res += fflags
    res += frm
    res += fcsr
    res += sup0
    res += sup1
    res += epc
    res += badvaddr
    res += ptbr
    res += asid
    res += count
    res += compare
    res += evec
    res += cause
    res += status
    res += hartid
    res += impl
    res += fatc
    res += send_ipi
    res += clear_ipi
    res += stats
    res += reset
    res += tohost
    res += fromhost
    res += cycle
    res += time
    res += instret
    res += uarch0
    res += uarch1
    res += uarch2
    res += uarch3
    res += uarch4
    res += uarch5
    res += uarch6
    res += uarch7
    res += uarch8
    res += uarch9
    res += uarch10
    res += uarch11
    res += uarch12
    res += uarch13
    res += uarch14
    res += uarch15
    res.toArray
  }
  val all32 = {
    val res = collection.mutable.ArrayBuffer(all:_*)
    res += counth
    res += cycleh
    res += timeh
    res += instreth
    res.toArray
  }
}


// TODO: use the riscv-dis binary instead. Requires change to Makefile (and the installation of riscv-dis).
// Using Chisel is not very efficient to get a disassemble string. :(
object Disassemble
{
  def apply(insn: UInt, is_mini: Boolean = false) = {
    val name :: fmt :: Nil = ListLookup(insn, default, table)
    if (is_mini)
       sprintf("%s", name)
    else
       sprintf("%s %s", name, operands(insn, fmt))
  }


  private def operands(insn: Bits, fmt: Bits): Bits = {
    val x = Vec(Str(" x0"), Str(" ra"), Str(" s0"), Str(" s1"),
                 Str(" s2"), Str(" s3"), Str(" s4"), Str(" s5"),
                 Str(" s6"), Str(" s7"), Str(" s8"), Str(" s9"),
                 Str("s10"), Str("s11"), Str(" sp"), Str(" tp"),
                 Str(" v0"), Str(" v1"), Str(" a0"), Str(" a1"),
                 Str(" a2"), Str(" a3"), Str(" a4"), Str(" a5"),
                 Str(" a6"), Str(" a7"), Str(" a8"), Str(" a9"),
                 Str("a10"), Str("a11"), Str("a12"), Str("a13"))
    val f = Vec(Str(" fs0"), Str(" fs1"), Str(" fs2"), Str(" fs3"),
                 Str(" fs4"), Str(" fs5"), Str(" fs6"), Str(" fs7"),
                 Str(" fs8"), Str(" fs9"), Str("fs10"), Str("fs11"),
                 Str("fs12"), Str("fs13"), Str("fs14"), Str("fs15"),
                 Str(" fv0"), Str(" fv1"), Str(" fa0"), Str(" fa1"),
                 Str(" fa2"), Str(" fa3"), Str(" fa4"), Str(" fa5"),
                 Str(" fa6"), Str(" fa7"), Str(" fa8"), Str(" fa9"),
                 Str("fa10"), Str("fa11"), Str("fa12"), Str("fa13"))
    val p = Vec(Str(" cr0"), Str(" cr1"), Str(" cr2"), Str(" cr3"),
                 Str(" cr4"), Str(" cr5"), Str(" cr6"), Str(" cr7"),
                 Str(" cr8"), Str(" cr9"), Str("cr10"), Str("cr11"),
                 Str("cr12"), Str("cr13"), Str("cr14"), Str("cr15"),
                 Str("cr16"), Str("cr17"), Str("cr18"), Str("cr19"),
                 Str("cr20"), Str("cr21"), Str("cr22"), Str("cr23"),
                 Str("cr24"), Str("cr25"), Str("cr26"), Str("cr27"),
                 Str("cr28"), Str("cr29"), Str("cr30"), Str("cr31"))


    def hex(x: SInt, plus: Char = ' ') =
      Cat(Mux(x < SInt(0), Str("-0x"), Str(plus + "0x")), Str(x.abs, 16))

    val comma = Str(',')
    val lparen = Str('(')
    val rparen = Str(')')

    val rd = insn(11,7)
    val rs1 = insn(19,15)
    val rs2 = insn(24,20)
    val immv = insn(31,20).toSInt
    val smmv = Cat(insn(31, 25), insn(11,7)).toSInt
    val bmmv = Cat(insn(31), insn(7), insn(30,25), insn(11,8)).toSInt
    val jmmv = Cat(insn(31,7), insn(19,12), insn(20), insn(30,21)).toSInt

    val imm = hex(immv)
    val bmm = hex(bmmv << UInt(1))
    val jmm = hex(jmmv << UInt(1))
    val smm = hex(smmv)
    val umm = Cat(Str("0x"), Str(insn(31,12).toUInt, 16))

    val laddr = Cat(Str(immv), lparen, x(rs1), rparen)
    val saddr = Cat(Str(bmmv), lparen, x(rs1), rparen)

    val r0 = x(rd)
    val r1 = Cat(r0, comma, x(rs1))
    val r2 = Cat(r1, comma, x(rs2))
    val f1 = Cat(f(rd), comma, f(rs1))
    val f2 = Cat(f1, comma, f(rs2))
    val fx = Cat(f(rd), comma, x(rs1))
    val xf1 = Cat(x(rd), comma, f(rs1))
    val xf2 = Cat(xf1, comma, f(rs2))
    val z = Str(' ')
    val i = Cat(r1, comma, imm)
    val b = Cat(x(rs1), comma, x(rs2), comma, bmm)
    val j = jmm
    val l = Cat(x(rd), comma, umm)
    val ld = Cat(x(rd), comma, laddr)
    val st = Cat(x(rs2), comma, saddr)
    val fld = Cat(f(rd), comma, laddr)
    val fst = Cat(f(rs2), comma, saddr)
    val amo = r2
    val r2_p = Cat(r0, comma, p(rs1), comma, x(rs2))

    val opts = Seq(r0, r1, r2, f1, f2, UInt(0), fx, xf1, xf2, z, i, b, j, l,  ld, st,
                   fld, fst, amo, r2_p)
    val maxLen = opts.map(_.getWidth).reduce(_ max _)
    val padded = opts.map(x => x.toUInt << UInt(maxLen - x.getWidth))
    Vec(padded)(fmt.toUInt)
  }

  private def FMT_R0  = Bits(0, 5)
  private def FMT_R1  = Bits(1, 5)
  private def FMT_R2  = Bits(2, 5)
  private def FMT_F1  = Bits(3, 5)
  private def FMT_F2  = Bits(4, 5)
  private def FMT_F3  = Bits(5, 5)
  private def FMT_FX  = Bits(6, 5)
  private def FMT_XF1 = Bits(7, 5)
  private def FMT_XF2 = Bits(8, 5)
  private def FMT_0   = Bits(9, 5)
  private def FMT_I   = Bits(10, 5)
  private def FMT_B   = Bits(11, 5)
  private def FMT_J   = Bits(12, 5)
  private def FMT_L   = Bits(13, 5)
  private def FMT_LD  = Bits(14, 5)
  private def FMT_ST  = Bits(15, 5)
  private def FMT_FLD = Bits(16, 5)
  private def FMT_FST = Bits(17, 5)
  private def FMT_AMO = Bits(18, 5)
  private def FMT_R2_P= Bits(19, 5)

  private def default = List(Str("unknown   "), FMT_0)

  import Instructions._
  private def table = Array(
    NOP->       List(Str("nop       "), FMT_0),
    Bits(0x4033,32)-> // machine generated bubble
                List(Str(" -        "), FMT_0),

    BNE->       List(Str("bne       "), FMT_B),
    BEQ->       List(Str("beq       "), FMT_B),
    BLT->       List(Str("blt       "), FMT_B),
    BLTU->      List(Str("bltu      "), FMT_B),
    BGE->       List(Str("bge       "), FMT_B),
    BGEU->      List(Str("bgeu      "), FMT_B),

    JAL->       List(Str("jal       "), FMT_J),
    JALR->      List(Str("jalr      "), FMT_LD),
    AUIPC->     List(Str("auipc     "), FMT_L),

    LB->        List(Str("lb        "), FMT_LD),
    LH->        List(Str("lh        "), FMT_LD),
    LW->        List(Str("lw        "), FMT_LD),
    LD->        List(Str("ld        "), FMT_LD),
    LBU->       List(Str("lbu       "), FMT_LD),
    LHU->       List(Str("lhu       "), FMT_LD),
    LWU->       List(Str("lwu       "), FMT_LD),
    SB->        List(Str("sb        "), FMT_ST),
    SH->        List(Str("sh        "), FMT_ST),
    SW->        List(Str("sw        "), FMT_ST),
    SD->        List(Str("sd        "), FMT_ST),

    AMOADD_W->  List(Str("amoadd.w  "), FMT_AMO),
    AMOSWAP_W-> List(Str("amoswap.w "), FMT_AMO),
    AMOAND_W->  List(Str("amoand.w  "), FMT_AMO),
    AMOOR_W->   List(Str("amoor.w   "), FMT_AMO),
    AMOMIN_W->  List(Str("amomin.w  "), FMT_AMO),
    AMOMINU_W-> List(Str("amominu.w "), FMT_AMO),
    AMOMAX_W->  List(Str("amomax.w  "), FMT_AMO),
    AMOMAXU_W-> List(Str("amomaxu.w "), FMT_AMO),
    AMOADD_D->  List(Str("amoadd.d  "), FMT_AMO),
    AMOSWAP_D-> List(Str("amoswap.d "), FMT_AMO),
    AMOAND_D->  List(Str("amoand.d  "), FMT_AMO),
    AMOOR_D->   List(Str("amoor.d   "), FMT_AMO),
    AMOMIN_D->  List(Str("amomin.d  "), FMT_AMO),
    AMOMINU_D-> List(Str("amominu.d "), FMT_AMO),
    AMOMAX_D->  List(Str("amomax.d  "), FMT_AMO),
    AMOMAXU_D-> List(Str("amomaxu.d "), FMT_AMO),

    LR_W->      List(Str("lr.w      "), FMT_AMO),
    LR_D->      List(Str("lr.d      "), FMT_AMO),
    SC_W->      List(Str("sc.w      "), FMT_AMO),
    SC_D->      List(Str("sc.d      "), FMT_AMO),

    LUI->       List(Str("lui       "), FMT_L),
    ADDI->      List(Str("addi      "), FMT_I),
    SLTI ->     List(Str("slti      "), FMT_I),
    SLTIU->     List(Str("sltiu     "), FMT_I),
    ANDI->      List(Str("andi      "), FMT_I),
    ORI->       List(Str("ori       "), FMT_I),
    XORI->      List(Str("xori      "), FMT_I),
    SLLI->      List(Str("slli      "), FMT_I),
    SRLI->      List(Str("srli      "), FMT_I),
    SRAI->      List(Str("srai      "), FMT_I),
    ADD->       List(Str("add       "), FMT_R2),
    SUB->       List(Str("sub       "), FMT_R2),
    SLT->       List(Str("slt       "), FMT_R2),
    SLTU->      List(Str("sltu      "), FMT_R2),
    AND->       List(Str("and       "), FMT_R2),
    OR->        List(Str("or        "), FMT_R2),
    XOR->       List(Str("xor       "), FMT_R2),
    SLL->       List(Str("sll       "), FMT_R2),
    SRL->       List(Str("srl       "), FMT_R2),
    SRA->       List(Str("sra       "), FMT_R2),

    ADDIW->     List(Str("addiw     "), FMT_I),
    SLLIW->     List(Str("slliw     "), FMT_I),
    SRLIW->     List(Str("srliw     "), FMT_I),
    SRAIW->     List(Str("sraiw     "), FMT_I),
    ADDW->      List(Str("addw      "), FMT_R2),
    SUBW->      List(Str("subw      "), FMT_R2),
    SLLW->      List(Str("sllw      "), FMT_R2),
    SRLW->      List(Str("srlw      "), FMT_R2),
    SRAW->      List(Str("sraw      "), FMT_R2),

    MUL->       List(Str("mul       "), FMT_R2),
    MULH->      List(Str("mulh      "), FMT_R2),
    MULHU->     List(Str("mulhu     "), FMT_R2),
    MULHSU->    List(Str("mulhsu    "), FMT_R2),
    MULW->      List(Str("mulw      "), FMT_R2),

    DIV->       List(Str("div       "), FMT_R2),
    DIVU->      List(Str("divu      "), FMT_R2),
    REM->       List(Str("rem       "), FMT_R2),
    REMU->      List(Str("remu      "), FMT_R2),
    DIVW->      List(Str("divw      "), FMT_R2),
    DIVUW->     List(Str("divuw     "), FMT_R2),
    REMW->      List(Str("remw      "), FMT_R2),
    REMUW->     List(Str("remuw     "), FMT_R2),

    SCALL->     List(Str("scall     "), FMT_0),
    CSRRW->     List(Str("csrrw     "), FMT_I),
    CSRRS->     List(Str("csrrs     "), FMT_I),
    CSRRC->     List(Str("csrrc     "), FMT_I),
    CSRRWI->    List(Str("csrrwi    "), FMT_I),
    CSRRSI->    List(Str("csrrsi    "), FMT_I),
    CSRRCI->    List(Str("csrrci    "), FMT_I),
    SRET->      List(Str("sret      "), FMT_0),
    FENCE->     List(Str("fence     "), FMT_0),
    FENCE_I->   List(Str("fence.i   "), FMT_0)
/*
    FCVT_S_D->  List(Str("fcvt.s.d  "), FMT_F1),
    FCVT_D_S->  List(Str("fcvt.d.s  "), FMT_F1),
    FSGNJ_S->   List(Str("fsgnj.s   "), FMT_F2),
    FSGNJ_D->   List(Str("fsgnj.d   "), FMT_F2),
    FSGNJX_S->  List(Str("fsgnx.s   "), FMT_F2),
    FSGNJX_D->  List(Str("fsgnx.d   "), FMT_F2),
    FSGNJN_S->  List(Str("fsgnjn.s  "), FMT_F2),
    FSGNJN_D->  List(Str("fsgnjn.d  "), FMT_F2),
    FMIN_S->    List(Str("fmin.s    "), FMT_F2),
    FMIN_D->    List(Str("fmin.d    "), FMT_F2),
    FMAX_S->    List(Str("fmax.s    "), FMT_F2),
    FMAX_D->    List(Str("fmax.d    "), FMT_F2),
    FADD_S->    List(Str("fadd.s    "), FMT_F2),
    FADD_D->    List(Str("fadd.d    "), FMT_F2),
    FSUB_S->    List(Str("fsub.s    "), FMT_F2),
    FSUB_D->    List(Str("fsub.d    "), FMT_F2),
    FMUL_S->    List(Str("fmul.s    "), FMT_F2),
    FMUL_D->    List(Str("fmul.d    "), FMT_F2),
    FMADD_S->   List(Str("fmadd.s   "), FMT_F3),
    FMADD_D->   List(Str("fmadd.d   "), FMT_F3),
    FMSUB_S->   List(Str("fmsub.s   "), FMT_F3),
    FMSUB_D->   List(Str("fmsub.d   "), FMT_F3),
    FNMADD_S->  List(Str("fnmadd.s  "), FMT_F3),
    FNMADD_D->  List(Str("fnmadd.d  "), FMT_F3),
    FNMSUB_S->  List(Str("fnmsub.s  "), FMT_F3),
    FNMSUB_D->  List(Str("fnmsub.d  "), FMT_F3),
    FCVT_W_S->  List(Str("fcvt.w.s  "), FMT_XF1),
    FCVT_W_D->  List(Str("fcvt.w.d  "), FMT_XF1),
    FCVT_WU_S-> List(Str("fcvt.wu.s "), FMT_XF1),
    FCVT_WU_D-> List(Str("fcvt.wu.d "), FMT_XF1),
    FCVT_L_S->  List(Str("fcvt.l.s  "), FMT_XF1),
    FCVT_L_D->  List(Str("fcvt.l.d  "), FMT_XF1),
    FCVT_LU_S-> List(Str("fcvt.lu.s "), FMT_XF1),
    FCVT_LU_D-> List(Str("fcvt.lu.d "), FMT_XF1),
    FEQ_S->     List(Str("feq.s     "), FMT_XF2),
    FEQ_D->     List(Str("feq.d     "), FMT_XF2),
    FLT_S->     List(Str("flt.s     "), FMT_XF2),
    FLT_D->     List(Str("flt.d     "), FMT_XF2),
    FLE_S->     List(Str("fle.s     "), FMT_XF2),
    FLE_D->     List(Str("fle.d     "), FMT_XF2),
    FCVT_S_W->  List(Str("fcvt.s.w  "), FMT_FX),
    FCVT_D_W->  List(Str("fcvt.d.w  "), FMT_FX),
    FCVT_S_WU-> List(Str("fcvt.s.wu "), FMT_FX),
    FCVT_D_WU-> List(Str("fcvt.d.wu "), FMT_FX),
    FCVT_S_L->  List(Str("fcvt.s.l  "), FMT_FX),
    FCVT_D_L->  List(Str("fcvt.d.l  "), FMT_FX),
    FCVT_S_LU-> List(Str("fcvt.s.lu "), FMT_FX),
    FCVT_D_LU-> List(Str("fcvt.d.lu "), FMT_FX),
    FLW->       List(Str("flw       "), FMT_FLD),
    FLD->       List(Str("fld       "), FMT_FLD),
    FSW->       List(Str("fsw       "), FMT_FST),
    FSD->       List(Str("fsd       "), FMT_FST),

    VVCFGIVL->  List(Str("vecInst   "), FMT_0),
    VVCFG->     List(Str("vecInst   "), FMT_0),
    VSETVL->    List(Str("vecInst   "), FMT_0),
    VF->        List(Str("vecInst   "), FMT_0),
    VMVV->      List(Str("vecInst   "), FMT_0),
    VMSV->      List(Str("vecInst   "), FMT_0),
    VFMVV->     List(Str("vecInst   "), FMT_0),
    FENCE_V_L-> List(Str("vecInst   "), FMT_0),
    FENCE_V_G-> List(Str("vecInst   "), FMT_0),
    VLD->       List(Str("vecInst   "), FMT_0),
    VLW->       List(Str("vecInst   "), FMT_0),
    VLWU->      List(Str("vecInst   "), FMT_0),
    VLH->       List(Str("vecInst   "), FMT_0),
    VLHU->      List(Str("vecInst   "), FMT_0),
    VLB->       List(Str("vecInst   "), FMT_0),
    VLBU->      List(Str("vecInst   "), FMT_0),
    VSD->       List(Str("vecInst   "), FMT_0),
    VSW->       List(Str("vecInst   "), FMT_0),
    VSH->       List(Str("vecInst   "), FMT_0),
    VSB->       List(Str("vecInst   "), FMT_0),
    VFLD->      List(Str("vecInst   "), FMT_0),
    VFLW->      List(Str("vecInst   "), FMT_0),
    VFSD->      List(Str("vecInst   "), FMT_0),
    VFSW->      List(Str("vecInst   "), FMT_0),
    VLSTD->     List(Str("vecInst   "), FMT_0),
    VLSTW->     List(Str("vecInst   "), FMT_0),
    VLSTWU->    List(Str("vecInst   "), FMT_0),
    VLSTH->     List(Str("vecInst   "), FMT_0),
    VLSTHU->    List(Str("vecInst   "), FMT_0),
    VLSTB->     List(Str("vecInst   "), FMT_0),
    VLSTBU->    List(Str("vecInst   "), FMT_0),
    VSSTD->     List(Str("vecInst   "), FMT_0),
    VSSTW->     List(Str("vecInst   "), FMT_0),
    VSSTH->     List(Str("vecInst   "), FMT_0),
    VSSTB->     List(Str("vecInst   "), FMT_0),
    VFLSTD->    List(Str("vecInst   "), FMT_0),
    VFLSTW->    List(Str("vecInst   "), FMT_0),
    VFSSTD->    List(Str("vecInst   "), FMT_0),
    VFSSTW->    List(Str("vecInst   "), FMT_0),

    VENQCMD->   List(Str("vecInst   "), FMT_0),
    VENQIMM1->  List(Str("vecInst   "), FMT_0),
    VENQIMM2->  List(Str("vecInst   "), FMT_0),
    VENQCNT->   List(Str("vecInst   "), FMT_0),
    VXCPTEVAC-> List(Str("vecInst   "), FMT_0),
    VXCPTKILL-> List(Str("vecInst   "), FMT_0),
    VXCPTHOLD-> List(Str("vecInst   "), FMT_0)
  */
  )
}
